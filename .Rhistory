m
m = matrix(c(1,2,3,4,1,2,3,4), nrow = 4)
m
t(m) %*% m
solve(t(m) %*% m)
m = matrix(c(1,2,3,4,1,2,3,4), nrow = 4, byrow = T)
m
m = matrix(c(1,2,3,4,1,2,3,4), nrow = 4)
m
df = data.frame(m)
df
y1 = c(2,3,4,5)
lm(y ~ X1 + X2)
lm(y ~ df$X1 + df$X2)
df$X1
df$X2
y
lm(y1 ~ df$X1 + df$X2)
v = c(-30, -2, 1)
cov = matrix(c(.0007, -.0028, .0101, -.0028, .0416, -.0304, .0101, -.304, .5601), nrow = 3)
cov
t(V)
t(v)
v %*% cov %*% t(v)
v
v %*% cov
v %*% cov %*% t(v)
v %*% cov %*% v
v
t(v) %*% cov
t(v) %*% cov %*% v
sqrt(t(v) %*% cov %*% v)
v
m
cov
cov = matrix(c(.0007, -.0028, .0101, -.0028, .0416, -.0304, .0101, -.0304, .5601), nrow = 3)
t(v) %*% cov %*% v
sqrt(t(v) %*% cov %*% v)
head(train_add)
head(test_add)
colName = c('radWin', 'u1', 's1', 'u2', 's2', 'w1', 'w2', 'lh1', 'lh2')
train_final_feature = daply(train_add, .(match_id), featureEngineering)
test_final_feature = daply(test_add, .(match_id), featureEngineering)
library(plyr)
train_final_feature = daply(train_add, .(match_id), featureEngineering)
test_final_feature = daply(test_add, .(match_id), featureEngineering)
colnames(train_final_feature) = colName
colnames(test_final_feature) = colName
logit1 = glm(radWin ~ u1 + s1 + u2 + s2 + w1 + w2 + lh1 + lh2,
family = "binomial", data = data.frame(train_final_feature))
prdt1 = predict(logit1, newdata = data.frame(test_final_feature), type = "response")
sum(test_final_feature[,1] == round(prdt1)) / length(round(prdt1)) # Accuracy of the 1st version: 0.60076
saveRDS(logit1, "prediction_logit.rds")
train_players = read.csv('dota2.csv', header = T)
train_basic = train_players[,c('match_id', 'account_id', 'hero_id', 'last_hits', 'Win')]
synergy = data.frame(matrix(0, nrow = 111, ncol = 111))
colnames(synergy) = paste(rep('C', 111), names(table(train_basic$hero_id)), sep = '') # Add 'R' & 'C' to the row/col name to make it more readable
rownames(synergy) = paste(rep('R', 111), names(table(train_basic$hero_id)), sep = '')
suppression_rowHeroWin = synergy  # synergy & total_teammate are synergy matrixes; suppression_rowHeroWin & total_enemy are suppression matrix
total_teammate = synergy
total_enemy = synergy
counter = 1
# Construct Synergy & Suppression matrixes
lm(list= ls())
rm(list= ls())
train_players = read.csv('dota2.csv', header = T)
train_basic = train_players[,c('match_id', 'account_id', 'hero_id', 'last_hits', 'Win')]
synergy = data.frame(matrix(0, nrow = 111, ncol = 111))
colnames(synergy) = paste(rep('C', 111), names(table(train_basic$hero_id)), sep = '') # Add 'R' & 'C' to the row/col name to make it more readable
rownames(synergy) = paste(rep('R', 111), names(table(train_basic$hero_id)), sep = '')
suppression_rowHeroWin = synergy  # synergy & total_teammate are synergy matrixes; suppression_rowHeroWin & total_enemy are suppression matrix
total_teammate = synergy
total_enemy = synergy
counter = 1
for (i in 1:(nrow(train_basic)/10)){
if (counter %% 1000 == 0) # counter to remind about the procedure
print (counter)
counter = counter + 1
# Extract 10 rows of data as data for one game
radiant_win = train_basic$Win[10*i-9]
hero_id_v = train_basic$hero_id[(10*i-9): (10*i)]
# Update Synergy matrix
rc_mtx = matrix(rep(c('R', 'C'), 10), nrow = 10, byrow = T)
pair_mtx = t(combn(hero_id_v[1:5], 2)) # Radiant data
rc_name_mtx = matrix(paste(rc_mtx, pair_mtx, sep = ''), nrow = 10)
for (j in 1:nrow(pair_mtx)){ # compute synergy for radiant
rn = rc_name_mtx[j, 1]; cn = rc_name_mtx[j, 2]
total_teammate[rn, cn] = total_teammate[rn, cn] + 1
if (radiant_win){ synergy[rn, cn] = synergy[rn, cn] + 1 }
}
pair_mtx = t(combn(hero_id_v[6:10], 2)) # Dire data
rc_name_mtx = matrix(paste(rc_mtx, pair_mtx, sep = ''), nrow = 10)
for (j in 1:nrow(pair_mtx)){# compute synergy for dire
rn = rc_name_mtx[j, 1]; cn = rc_name_mtx[j, 2]
total_teammate[rn, cn] = total_teammate[rn, cn] + 1
if (!radiant_win){ synergy[rn, cn] = synergy[rn, cn] + 1 }
}
# Update Synergy matrix
rc_mtx = matrix(rep(c('R', 'C'), 25), nrow = 25, byrow = T) # 25 elements in the matrix need updation
pair_mtx1 = as.matrix(expand.grid(hero_id_v[1:5], hero_id_v[6:10]))
pair_mtx2 = as.matrix(expand.grid(hero_id_v[6:10], hero_id_v[1:5]))
rc_name_mtx1 = matrix(paste(rc_mtx, pair_mtx1, sep = ''), nrow = 25)
rc_name_mtx2 = matrix(paste(rc_mtx, pair_mtx2, sep = ''), nrow = 25)
for (j in 1:nrow(pair_mtx)){
rn1 = rc_name_mtx1[j, 1]; cn1 = rc_name_mtx1[j, 2]
rn2 = rc_name_mtx2[j, 1]; cn2 = rc_name_mtx2[j, 2]
total_enemy[rn1, cn1] = total_enemy[rn1, cn1] + 1 # total_enemy[i, j] is the number of games when hero i & hero j appear in different sides of the team
if (radiant_win)
suppression_rowHeroWin[rn1, cn1] = suppression_rowHeroWin[rn1, cn1] + 1
# suppression_rowHeroWin[i, j] is the number of games when hero i win, and hero j is in the other team
else
suppression_rowHeroWin[rn2, cn2] = suppression_rowHeroWin[rn2, cn2] + 1
}
}
## Compute syn_coef and sup_coef for hero1 and hero2;
compute.syn_coef = function(heroID1, heroID2){
rn1 = paste('R', heroID1, sep = ''); cn1 = paste('C', heroID2, sep = '')
rn2 = paste('R', heroID2, sep = ''); cn2 = paste('C', heroID1, sep = '')
syn_total_win = synergy[rn1, cn1] + synergy[rn2, cn2]
syn_total = total_teammate[rn1, cn1] + total_teammate[rn2, cn2]
syn_winrate = syn_score / syn_total
return (c(syn_winrate, syn_total))
}
compute.sup_coef = function(heroID1, heroID2){
rn1 = paste('R', heroID1, sep = ''); cn1 = paste('C', heroID2, sep = '')
rn2 = paste('R', heroID2, sep = ''); cn2 = paste('C', heroID1, sep = '')
sup_totam_win = suppression_rowHeroWin[rn1, cn1]
sup_total = total_enemy[rn1, cn1] + total_enemy[rn2, cn2]
sup_winrate = sup_score / sup_total
return (c(sup_winrate, sup_total))
}
hero_pair = expand.grid(as.numeric(names(table(train_basic$hero_id))), as.numeric(names(table(train_basic$hero_id)))) # pairwise hero_id for ALL heroes
colnames(hero_pair) = c('hero1', 'hero2')
all_syn_coef = t(mapply(compute.syn_coef, hero_pair$hero1, hero_pair$hero2))
all_sup_coef = t(mapply(compute.sup_coef, hero_pair$hero1, hero_pair$hero2))
colnames(all_syn_coef) = c('winrate_syn', 'total_syn')
colnames(all_sup_coef) = c('winrate_sup', 'total_sup')
syn_coef_df = data.frame(hero_pair, all_syn_coef)
sup_coef_df = data.frame(hero_pair, all_sup_coef)
syn_coef_matrix_rm0 = round(subset(syn_coef_df, hero1 != 0 & hero2 != 0 & hero1 != hero2), 4) # eliminate rows when hero_id == 0 & hero_id1 == hero_id2. These rows makes no sense
sup_coef_matrix_rm0 = round(subset(sup_coef_df, hero1 != 0 & hero2 != 0 & hero1 != hero2), 4)
# Note that: subset(syn_coef_matrix_rm0, hero_id1 == a & hero_id2 == b, select = winrate) ==
#            subset(syn_coef_matrix_rm0, hero_id1 == b & hero_id2 == a, select = winrate);
#            subset(sup_coef_matrix_rm0, hero_id1 == a & hero_id2 == b, select = winrate) +
#            subset(sup_coef_matrix_rm0, hero_id1 == b & hero_id2 == a, select = winrate) == 1;
write.csv(syn_coef_matrix_rm0, 'systemG_syn_edges.csv', row.names = F)
write.csv(sup_coef_matrix_rm0, 'systemG_sup_edges.csv', row.names = F)
hero_pair = expand.grid(as.numeric(names(table(train_basic$hero_id))), as.numeric(names(table(train_basic$hero_id)))) # pairwise hero_id for ALL heroes
colnames(hero_pair) = c('hero1', 'hero2')
all_syn_coef = t(mapply(compute.syn_coef, hero_pair$hero1, hero_pair$hero2))
all_sup_coef = t(mapply(compute.sup_coef, hero_pair$hero1, hero_pair$hero2))
syn_score
compute.syn_coef = function(heroID1, heroID2){
rn1 = paste('R', heroID1, sep = ''); cn1 = paste('C', heroID2, sep = '')
rn2 = paste('R', heroID2, sep = ''); cn2 = paste('C', heroID1, sep = '')
syn_total_win = synergy[rn1, cn1] + synergy[rn2, cn2]
syn_total = total_teammate[rn1, cn1] + total_teammate[rn2, cn2]
syn_winrate = syn_score / syn_total
return (c(syn_winrate, syn_total))
}
compute.sup_coef = function(heroID1, heroID2){
rn1 = paste('R', heroID1, sep = ''); cn1 = paste('C', heroID2, sep = '')
rn2 = paste('R', heroID2, sep = ''); cn2 = paste('C', heroID1, sep = '')
sup_totam_win = suppression_rowHeroWin[rn1, cn1]
sup_total = total_enemy[rn1, cn1] + total_enemy[rn2, cn2]
sup_winrate = sup_score / sup_total
return (c(sup_winrate, sup_total))
}
hero_pair = expand.grid(as.numeric(names(table(train_basic$hero_id))), as.numeric(names(table(train_basic$hero_id)))) # pairwise hero_id for ALL heroes
colnames(hero_pair) = c('hero1', 'hero2')
all_syn_coef = t(mapply(compute.syn_coef, hero_pair$hero1, hero_pair$hero2))
all_sup_coef = t(mapply(compute.sup_coef, hero_pair$hero1, hero_pair$hero2))
compute_syn_coef = function(heroID1, heroID2){
rn1 = paste('R', heroID1, sep = ''); cn1 = paste('C', heroID2, sep = '')
rn2 = paste('R', heroID2, sep = ''); cn2 = paste('C', heroID1, sep = '')
syn_total_win = synergy[rn1, cn1] + synergy[rn2, cn2]
syn_total = total_teammate[rn1, cn1] + total_teammate[rn2, cn2]
syn_winrate = syn_score / syn_total
return (c(syn_winrate, syn_total))
}
compute_sup_coef = function(heroID1, heroID2){
rn1 = paste('R', heroID1, sep = ''); cn1 = paste('C', heroID2, sep = '')
rn2 = paste('R', heroID2, sep = ''); cn2 = paste('C', heroID1, sep = '')
sup_totam_win = suppression_rowHeroWin[rn1, cn1]
sup_total = total_enemy[rn1, cn1] + total_enemy[rn2, cn2]
sup_winrate = sup_score / sup_total
return (c(sup_winrate, sup_total))
}
hero_pair = expand.grid(as.numeric(names(table(train_basic$hero_id))), as.numeric(names(table(train_basic$hero_id)))) # pairwise hero_id for ALL heroes
colnames(hero_pair) = c('hero1', 'hero2')
all_syn_coef = t(mapply(compute_syn_coef, hero_pair$hero1, hero_pair$hero2))
compute_syn_coef = function(heroID1, heroID2){
rn1 = paste('R', heroID1, sep = ''); cn1 = paste('C', heroID2, sep = '')
rn2 = paste('R', heroID2, sep = ''); cn2 = paste('C', heroID1, sep = '')
syn_total_win = synergy[rn1, cn1] + synergy[rn2, cn2]
syn_total = total_teammate[rn1, cn1] + total_teammate[rn2, cn2]
syn_winrate = syn_total_win / syn_total
return (c(syn_winrate, syn_total))
}
hero_pair = expand.grid(as.numeric(names(table(train_basic$hero_id))), as.numeric(names(table(train_basic$hero_id)))) # pairwise hero_id for ALL heroes
colnames(hero_pair) = c('hero1', 'hero2')
all_syn_coef = t(mapply(compute_syn_coef, hero_pair$hero1, hero_pair$hero2))
all_sup_coef = t(mapply(compute_sup_coef, hero_pair$hero1, hero_pair$hero2))
colnames(all_syn_coef) = c('winrate_syn', 'total_syn')
colnames(all_sup_coef) = c('winrate_sup', 'total_sup')
syn_coef_df = data.frame(hero_pair, all_syn_coef)
all_syn_coef = t(mapply(compute_syn_coef, hero_pair$hero1, hero_pair$hero2))
all_sup_coef = t(mapply(compute_sup_coef, hero_pair$hero1, hero_pair$hero2))
compute_sup_coef = function(heroID1, heroID2){
rn1 = paste('R', heroID1, sep = ''); cn1 = paste('C', heroID2, sep = '')
rn2 = paste('R', heroID2, sep = ''); cn2 = paste('C', heroID1, sep = '')
sup_total_win = suppression_rowHeroWin[rn1, cn1]
sup_total = total_enemy[rn1, cn1] + total_enemy[rn2, cn2]
sup_winrate = sup_total_win / sup_total
return (c(sup_winrate, sup_total))
}
hero_pair = expand.grid(as.numeric(names(table(train_basic$hero_id))), as.numeric(names(table(train_basic$hero_id)))) # pairwise hero_id for ALL heroes
colnames(hero_pair) = c('hero1', 'hero2')
all_syn_coef = t(mapply(compute_syn_coef, hero_pair$hero1, hero_pair$hero2))
all_sup_coef = t(mapply(compute_sup_coef, hero_pair$hero1, hero_pair$hero2))
colnames(all_syn_coef) = c('winrate_syn', 'total_syn')
colnames(all_sup_coef) = c('winrate_sup', 'total_sup')
syn_coef_df = data.frame(hero_pair, all_syn_coef)
sup_coef_df = data.frame(hero_pair, all_sup_coef)
syn_coef_matrix_rm0 = round(subset(syn_coef_df, hero1 != 0 & hero2 != 0 & hero1 != hero2), 4) # eliminate rows when hero_id == 0 & hero_id1 == hero_id2. These rows makes no sense
sup_coef_matrix_rm0 = round(subset(sup_coef_df, hero1 != 0 & hero2 != 0 & hero1 != hero2), 4)
write.csv(syn_coef_matrix_rm0, 'systemG_syn_edges.csv', row.names = F)
write.csv(sup_coef_matrix_rm0, 'systemG_sup_edges.csv', row.names = F)
hero_names = read.csv('hero_names.csv', header = T, as.is = T)
test_labels = read.csv('test_labels.csv', header = T)
test_players = read.csv('test_player.csv', header = T)
compute.win.eachplayer = function(rw) { return (rep(c(as.numeric(rw == 1), as.numeric(rw == 0)), each = 5, times = 1)) }
test_basic = data.frame(test_players[,c('match_id', 'account_id', 'hero_id')],
Win = as.vector(mapply(compute.win.eachplayer, test_labels$radiant_win))) # add win column into test_basic
node = data.frame(avg_last_hits = round(tapply(train_basic$last_hits, train_basic$hero_id, mean), 4))
node$hero_id = as.numeric(row.names(node))
node$avg_last_hits = as.numeric(node$avg_last_hits)
get.hero.name = function(id) {return (as.character(subset(hero_names, hero_id == id, select = localized_name))) }
node$hero_name = mapply(get.hero.name, node$hero_id)
total_win_train = tapply(train_basic$Win, train_basic$hero_id, sum)
total_win_test = tapply(test_basic$Win, test_basic$hero_id, sum)
total_win = total_win_train + total_win_test
total_game = table(train_basic$hero_id) + table(test_basic$hero_id)
node$win_rate = as.numeric(round(total_win/total_game, 4))
node$total_game = as.numeric(total_game)
node = node[-1, c(2,3,4,5,1)]
write.csv(node, 'systemG_heroes_nodes.csv', row.names = F)
## Interface to get syn/sup winrate or total.
get.syn_coef = function(heroID1, heroID2){
return ( subset(syn_coef_matrix_rm0, hero1 == heroID1 & hero2 == heroID2, select = c('winrate', 'total')) )
}
get.sup_coef = function(heroID1, heroID2){
return ( subset(sup_coef_matrix_rm0, hero1 == heroID1 & hero2 == heroID2, select = c('winrate', 'total')) )
}
head(node)
head(syn_coef_matrix_rm0)
5.13-1.5
3.17-1.5
3.18-1.5
3.54-1.5
2.64-1.5
3.63 + 1.68 + 2.04 + 1.14
105 * 3.63 / 8.49
105 * 1.68 / 8.49
105 * 2.04 / 8.49
105 * 1.14 / 8.49
(3.39 - 1.5) + (1.82 - 1.5) + (9.22 - 1.5)
90 * (3.39 - 1.5) / 9.93
90 * (1.82 - 1.5) / 9.93
88.87 - 4.1
48.21 - 3.8
90 * (9.22 - 1.5) / 9.93
296.56 - 3.8
29+37+32
install.packages('xlsx')
library(xlsx)
library(xlsx)
library('gdata')
install.packages('gdata')
library(gdata)
25 + 196 + 140 + 205 + 113 + 187 + 200 + 217 + 350 + 150 + 60 + 300 + 330
60 + 75 * 8
173 + 302 + 84 * 5 + 80 + 70 + 25 + 217 + 350 + 120 + 300 + 140 + 205 + 113 + 187 + 210
173 + 302 + 84 * 5 + 80 + 60 + 70 + 25 + 217 + 350 + 120 + 300 + 140 + 205 + 113 + 187 + 210
100 * 8
3000 + 600
173 + 302 + 84 * 5 + 80 + 60 + 70 + 25 + 217 + 350 + 120 + 300 + 140 + 205 + 113 + 187 + 311
173 + 302 + 84 * 5 + 80 + 60 + 70 + 25 + 217 + 350 + 120 + 300 + 140 + 205 + 113 + 187 + 311 + 75 * 8
173 + 302 + 84 * 5 + 80 + 60 + 70 + 25 + 217 + 350 + 120 + 300 + 140 + 205 + 113 + 187 + 311 + 70 * 8
¬
(34 + 50) * 5 + 70 + 25 + 217 + 350 + 300 + 140 + 205 + 113 + 187 + 311
((34 + 50) * 5 + 70 + 25 + 217 + 350 + 300 + 140 + 205 + 113 + 187 + 311) / 2
(34 + 50) * 5 + 60 + 70 + 25 + 217 + 320 + 250 + 140 + 205 + 113 + 187 + 211
((34 + 50) * 5 + 60 + 70 + 25 + 217 + 320 + 250 + 140 + 205 + 113 + 187 + 211) / 2
(34 + 50) * 5 + 60 + 70 + 25 + 217 + 320 + 250 + 140 + 205 + 113 + 187 + 211
((34 + 50) * 5 + 60 + 70 + 25 + 217 + 320 + 250 + 140 + 205 + 113 + 187 + 311) / 2
((34 + 50) * 5 + 60 + 70 + 25 + 217 + 320 + 250 + 140 + 205 + 113 + 187 + 211) / 2
log(@)
log(3)
log(1.5)
log(3)
m = data.frame(row.names = c('id', 'pw'))
m
m = data.frame(col.names = c('id', 'pw'))
m
?data.frame
data.frame
m = data.frame(id = c(1,2), name = c('alice', 'bob'))
m
seq(1,2,3)
seq(1,5)
seq(1,5,2)
m = matrix(1,2,3,4,5,6, nrow = 3)
m = matrix(c(1,2,3,4,5,6) nrow = 3)
m = matrix(c(1,2,3,4,5,6), nrow = 3)
m
m[1:3,]
m[1:3,3]
m[1:3,2]
m = matrix(c(1:15), nrow = 5)
m
m = matrix(1:15, nrow = 5)
m
m[1:3,2:4]
m[1:3,1:2]
m[:3,1:2]
m[3,1:2]
m[3,]
version
library("rvest")
library("tibble")
library(xml2)
library(xml2) # for rvest
library("rvest")
library("tibble")
library("rJava") # for qdap
library("qdap")
java
Sys.setenv(JAVA_HOME = '/Library/Java/Home')
library("qdap")
library("qdap")
library("qdap")
library(rJava)
library("qdap")
install.packages('rJava')
install.packages("rJava")
library("qdap")
install.packages("openNLP")
library(openNLP)
require(rJava)
library(openNLP)
require(rJava)
require(openNLP)
library(openNLP)
library("qdap")
library("qdap")
install.packages("rJava",type='source')
install.packages("rJava", type = "source")
library("qdap")
library("rJava") # for qdap
library("qdap")
library("rJava") # for qdap
library("rJava") # for qdap
library("qdap")
library("qdap")
dyn.load('/Library/Java/JavaVirtualMachines//jdk1.8.0_73.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines//jdk1.8.0_73.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_73.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_73.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(rJava)
library(openNLP)
library(qdap)
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("plyr")
library(xml2) # for rvest
library("rvest")
library("tibble")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home/jre/lib/server/libjvm.dylib') # for qdap
library("rJava") # for qdap
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("topicmodels")
setwd('/Users/AaronWang/Desktop/5243-Spr2017-Proj1-dw2726')
# source("./lib/plotstacked.R")
source("./lib/speechFuncs.R")
### Inauguaral speeches
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php") # Get link URLs.
inaug=f.speechlinks(main.page)
inaug=inaug[-nrow(inaug),] # remove the last line, irrelevant due to error.
#### Nomination speeches
main.page=read_html("http://www.presidency.ucsb.edu/nomination.php")
nomin <- f.speechlinks(main.page)
#### Farewell speeches
main.page=read_html("http://www.presidency.ucsb.edu/farewell_addresses.php")
farewell <- f.speechlinks(main.page)
inaug.list=read.csv("./data/inauglist.csv", stringsAsFactors = FALSE)
nomin.list=read.csv("./data/nominlist.csv", stringsAsFactors = FALSE)
farewell.list=read.csv("./data/farewelllist.csv", stringsAsFactors = FALSE)
inaug.list$Date = as.Date(inaug[,1], format="%B %e, %Y")
farewell.list$Date = as.Date(farewell[,1], format="%B %e, %Y")
speech.list=rbind(inaug.list, nomin.list, farewell.list)
speech.list$type=c(rep("inaug", nrow(inaug.list)),
rep("nomin", nrow(nomin.list)),
rep("farewell", nrow(farewell.list)))
speech.url=rbind(inaug, nomin, farewell)
speech.list=cbind(speech.list, speech.url)
# Loop over each row in speech.list
speech.list$fulltext=NA
for(i in seq(nrow(speech.list))) {
text <- read_html(speech.list$urls[i]) %>% # load the page
html_nodes(".displaytext") %>% # isolate the text
html_text() # get the text
speech.list$fulltext[i]=text
}
speech1=paste(readLines("./data/fulltext/SpeechDonaldTrump-NA.txt",
n=-1, skipNul=TRUE),
collapse=" ")
speech2=paste(readLines("./data/fulltext/SpeechDonaldTrump-NA2.txt",
n=-1, skipNul=TRUE),
collapse=" ")
speech3=paste(readLines("./data/fulltext/PressDonaldTrump-NA.txt",
n=-1, skipNul=TRUE),
collapse=" ")
Trump.speeches=data.frame(
President=rep("Donald J. Trump", 3),
File=rep("DonaldJTrump", 3),
Term=rep(0, 3),
Party=rep("Republican", 3),
Date = as.Date(c("August 31, 2016", "September 7, 2016", "January 11, 2017"), format="%B %e, %Y"),
Words=c(word_count(speech1), word_count(speech2), word_count(speech3)),
Win=rep("yes", 3),
type=rep("speeches", 3),
links=rep(NA, 3),
urls=rep(NA, 3),
fulltext=c(speech1, speech2, speech3)
)
speech.list=rbind(speech.list, Trump.speeches)
sentence.list=NULL
for(i in 1:nrow(speech.list)){
sentences=sent_detect(speech.list$fulltext[i],
endmarks = c("?", ".", "!", "|", ";"))
if(length(sentences)>0){
emotions=get_nrc_sentiment(sentences)
word.count=word_count(sentences)
# in case the word counts are zeros?
emotions=diag(1/(word.count+0.01))%*%as.matrix(emotions) # (Use the inverse length of each sentence as the weight )
sentence.list=rbind(sentence.list,
cbind(speech.list[i,-ncol(speech.list)],
sentences=as.character(sentences),
word.count,
emotions,
sent.id=1:length(sentences)
)
)
}
}
sentence.list = filter(sentence.list, !is.na(word.count))
dim(sentence.list)
# Compute the top emotion and its corresponding value of each sentences.
sentence.list$topemotion=apply(select(sentence.list, anger:positive), 1, which.max)
sentence.list$topemotion.v=apply(select(sentence.list, anger:positive), 1, max)
feature_mean = function(df){ return (apply(df %>% select(c(anger:positive)), 2, mean, na.rm = T)) }
emo.data = sentence.list %>% filter(type == 'inaug') %>% select(c(Date,anger:positive)) %>% ddply(.(Date), feature_mean)
rownames(emo.data) = substr(emo.data$Date, 1, 4) # To track the temporal trend clearly, use Date as the label for each speech
km.res=kmeans(select(emo.data, negative:positive), iter.max=200, 3, nstart = 59)
fviz_cluster(km.res,
stand=T, repel= TRUE, labelsize = 11,
data = select(emo.data, anger:positive),
show.clust.cent=FALSE)
corpus.list=sentence.list[2:(nrow(sentence.list)-1), ]
sentence.pre=sentence.list$sentences[1:(nrow(sentence.list)-2)]
sentence.post=sentence.list$sentences[3:(nrow(sentence.list)-1)]
corpus.list$snipets=paste(sentence.pre, corpus.list$sentences, sentence.post, sep=" ") # paste 3 continuous sentences together
rm.rows=(1:nrow(corpus.list))[corpus.list$sent.id==1]
rm.rows=c(rm.rows, rm.rows-1)
corpus.list=corpus.list[-rm.rows, ]
.pardefault <- par(no.readonly = T)
par(mar = c(3,3,2,2))
sentence.list.inaug = filter(sentence.list, type == 'inaug')
res = tapply(sentence.list.inaug$word.count, sentence.list.inaug$Date, mean)
plot(as.Date(names(res)), unname(res), type = 'b')
party_map = unique(sentence.list.inaug[,c('Date', 'Party')])
f = function(date){ party_map[which(party_map$Date == date), 'Party'] }
party_str = mapply(f, as.Date(names(res)))
dim(corpus.list)
corpus.list$ldatopic=as.vector(ldaOut.topics)
ldaOut <- readRDS(file = "./data/lda_model.rds")
ldaOut.topics <- as.matrix(topics(ldaOut)) #docs to topics
dim(ldaOut.topics)
